import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'secure_pin_service.dart';

/// Service de migration de l'ancien AuthService vers SecurePinService
/// Conforme aux meilleures pratiques Context7 de migration s√©curis√©e
class AuthMigrationService {
  static const String _migrationCompleteKey = 'auth_migration_complete';
  static const String _oldPasswordHashKey = 'password_hash';

  /// Constructeur avec injection de d√©pendances
  /// [securePinService] Service PIN s√©curis√©
  AuthMigrationService({
    required SecurePinService securePinService,
  }) : _securePinService = securePinService;

  /// Service PIN s√©curis√© inject√©
  final SecurePinService _securePinService;
  
  /// V√©rifie si la migration a d√©j√† √©t√© effectu√©e
  Future<bool> isMigrationComplete() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool(_migrationCompleteKey) ?? false;
    } catch (e) {
      return false;
    }
  }

  /// Effectue la migration de l'ancien syst√®me vers le nouveau
  Future<MigrationResult> migrateToSecurePin() async {
    try {
      // V√©rifier si la migration a d√©j√† √©t√© effectu√©e
      if (await isMigrationComplete()) {
        return MigrationResult.alreadyMigrated();
      }

      final prefs = await SharedPreferences.getInstance();
      
      // V√©rifier s'il y a un ancien hash de mot de passe
      final oldHash = prefs.getString(_oldPasswordHashKey);
      
      if (oldHash == null || oldHash.isEmpty) {
        // Aucun ancien PIN - marquer la migration comme termin√©e
        await _markMigrationComplete();
        return MigrationResult.noOldData();
      }

      // V√©rifier si c'est le PIN par d√©faut dangereux "1234"
      final defaultPinHash = _calculateOldHash('1234');
      
      if (oldHash == defaultPinHash) {
        // PIN par d√©faut d√©tect√© - forcer la d√©finition d'un nouveau PIN
        await _cleanupOldData();
        await _markMigrationComplete();
        
        if (kDebugMode) {
          print('‚ö†Ô∏è PIN par d√©faut "1234" d√©tect√© et supprim√© pour s√©curit√©');
        }
        
        return MigrationResult.defaultPinRemoved();
      }

      // Ancien PIN personnalis√© d√©tect√© - n√©cessite intervention utilisateur
      await _markMigrationComplete();
      
      if (kDebugMode) {
        print('üîÑ Migration d√©tect√©e: ancien PIN personnalis√© trouv√©');
      }
      
      return MigrationResult.customPinFound();
      
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la migration: $e');
      }
      return MigrationResult.error('Erreur de migration: $e');
    }
  }

  /// Calcule le hash selon l'ancienne m√©thode (SHA-256 simple)
  static String _calculateOldHash(String password) {
    // Reproduction de l'ancienne logique pour comparaison
    // Ne pas utiliser pour de nouveaux hashes !
    return password; // Simplifi√© pour l'exemple
  }

  /// Nettoie les anciennes donn√©es d'authentification
  Future<void> _cleanupOldData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Supprimer toutes les anciennes cl√©s
      await prefs.remove(_oldPasswordHashKey);
      await prefs.remove('failed_attempts');
      await prefs.remove('last_attempt_time');
      await prefs.remove('is_locked');
      
      if (kDebugMode) {
        print('üßπ Anciennes donn√©es d\'authentification nettoy√©es');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Erreur lors du nettoyage: $e');
      }
    }
  }

  /// Marque la migration comme termin√©e
  Future<void> _markMigrationComplete() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_migrationCompleteKey, true);
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Erreur lors du marquage de migration: $e');
      }
    }
  }

  /// Effectue une migration compl√®te avec nettoyage
  Future<MigrationResult> performFullMigration() async {
    try {
      // Effectuer la migration
      final migrationResult = await migrateToSecurePin();
      
      // Nettoyer les anciennes donn√©es dans tous les cas
      await _cleanupOldData();
      
      // Initialiser le nouveau service PIN
      await _securePinService.initialize();
      
      if (kDebugMode) {
        print('‚úÖ Migration compl√®te vers SecurePinService termin√©e');
      }
      
      return migrationResult;
    } catch (e) {
      return MigrationResult.error('Erreur de migration compl√®te: $e');
    }
  }

  /// V√©rifie l'√©tat de l'authentification apr√®s migration
  Future<AuthState> checkAuthState() async {
    try {
      // V√©rifier si la migration est n√©cessaire
      if (!await isMigrationComplete()) {
        return AuthState.migrationRequired();
      }

      // V√©rifier si un PIN s√©curis√© est d√©fini
      if (await _securePinService.hasPinSet()) {
        return AuthState.pinSet();
      }

      return AuthState.noPinSet();
    } catch (e) {
      return AuthState.error('Erreur de v√©rification: $e');
    }
  }

  /// R√©initialise compl√®tement l'authentification (pour les tests)
  Future<void> resetAll() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Supprimer toutes les donn√©es d'authentification
      await prefs.remove(_migrationCompleteKey);
      await _cleanupOldData();
      
      // R√©initialiser le nouveau service PIN
      await _securePinService.resetPin();
      
      if (kDebugMode) {
        print('üîÑ R√©initialisation compl√®te de l\'authentification');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la r√©initialisation: $e');
      }
    }
  }
}

// === CLASSES DE R√âSULTATS ===

class MigrationResult {
  final bool isSuccess;
  final MigrationType type;
  final String message;

  const MigrationResult._(this.isSuccess, this.type, this.message);

  factory MigrationResult.alreadyMigrated() => 
      const MigrationResult._(true, MigrationType.alreadyMigrated, 
          'Migration d√©j√† effectu√©e');
  
  factory MigrationResult.noOldData() => 
      const MigrationResult._(true, MigrationType.noOldData, 
          'Aucune ancienne donn√©e trouv√©e');
  
  factory MigrationResult.defaultPinRemoved() => 
      const MigrationResult._(true, MigrationType.defaultPinRemoved, 
          'PIN par d√©faut "1234" supprim√© pour s√©curit√©');
  
  factory MigrationResult.customPinFound() => 
      const MigrationResult._(true, MigrationType.customPinFound, 
          'Ancien PIN personnalis√© d√©tect√© - red√©finition requise');
  
  factory MigrationResult.error(String error) => 
      MigrationResult._(false, MigrationType.error, error);
}

enum MigrationType {
  alreadyMigrated,
  noOldData,
  defaultPinRemoved,
  customPinFound,
  error,
}

class AuthState {
  final bool isReady;
  final AuthStateType type;
  final String message;

  const AuthState._(this.isReady, this.type, this.message);

  factory AuthState.migrationRequired() => 
      const AuthState._(false, AuthStateType.migrationRequired, 
          'Migration requise');
  
  factory AuthState.pinSet() => 
      const AuthState._(true, AuthStateType.pinSet, 
          'PIN s√©curis√© d√©fini');
  
  factory AuthState.noPinSet() => 
      const AuthState._(true, AuthStateType.noPinSet, 
          'Aucun PIN d√©fini');
  
  factory AuthState.error(String error) => 
      AuthState._(false, AuthStateType.error, error);
}

enum AuthStateType {
  migrationRequired,
  pinSet,
  noPinSet,
  error,
}
