/// üö™ Use Case SignOut - D√©connexion utilisateur
///
/// G√®re la logique m√©tier pour la d√©connexion d'un utilisateur.
/// Nettoie les donn√©es de session et invalide les tokens.

import 'package:dartz/dartz.dart';
import '../../../../core/errors/failures.dart';
import '../../../../core/usecases/usecase.dart';
import '../repositories/auth_repository.dart';

/// Use case pour la d√©connexion d'un utilisateur
class SignOutUseCase implements NoParamsUseCase<void> {
  final AuthRepository repository;

  const SignOutUseCase(this.repository);

  @override
  Future<Either<Failure, void>> call() async {
    try {
      // D√©connexion via le repository
      return await repository.signOut();
    } catch (e) {
      // En cas d'erreur inattendue, on retourne un √©chec syst√®me
      return Left(SystemFailure.unexpected(
        error: e.toString(),
        stackTrace: StackTrace.current,
      ));
    }
  }
}

/// Use case pour la d√©connexion avec options avanc√©es
class SignOutWithOptionsUseCase implements UseCase<void, SignOutOptions> {
  final AuthRepository repository;

  const SignOutWithOptionsUseCase(this.repository);

  @override
  Future<Either<Failure, void>> call(SignOutOptions params) async {
    try {
      // D√©connexion de base
      final signOutResult = await repository.signOut();

      if (signOutResult.isLeft()) {
        return signOutResult;
      }

      // Actions suppl√©mentaires selon les options
      if (params.invalidateAllSessions) {
        final invalidateResult = await repository.invalidateAllSessions();
        if (invalidateResult.isLeft()) {
          // Log l'erreur mais ne fait pas √©chouer la d√©connexion
          // car l'utilisateur est d√©j√† d√©connect√© localement
        }
      }

      if (params.clearLocalData) {
        // Ici on pourrait ajouter la logique pour nettoyer
        // les donn√©es locales (cache, pr√©f√©rences, etc.)
        // Pour l'instant, on consid√®re que c'est fait par le repository
      }

      return const Right(null);
    } catch (e) {
      return Left(SystemFailure.unexpected(
        error: e.toString(),
        stackTrace: StackTrace.current,
      ));
    }
  }
}

/// Options pour la d√©connexion avanc√©e
class SignOutOptions {
  /// Invalider toutes les sessions sur tous les appareils
  final bool invalidateAllSessions;

  /// Nettoyer toutes les donn√©es locales
  final bool clearLocalData;

  /// Raison de la d√©connexion (pour les logs)
  final SignOutReason reason;

  const SignOutOptions({
    this.invalidateAllSessions = false,
    this.clearLocalData = false,
    this.reason = SignOutReason.userInitiated,
  });

  /// Options par d√©faut pour une d√©connexion simple
  factory SignOutOptions.simple() {
    return const SignOutOptions();
  }

  /// Options pour une d√©connexion compl√®te (s√©curit√©)
  factory SignOutOptions.complete() {
    return const SignOutOptions(
      invalidateAllSessions: true,
      clearLocalData: true,
      reason: SignOutReason.security,
    );
  }

  /// Options pour une d√©connexion forc√©e (session expir√©e)
  factory SignOutOptions.forced() {
    return const SignOutOptions(
      invalidateAllSessions: false,
      clearLocalData: true,
      reason: SignOutReason.sessionExpired,
    );
  }

  @override
  String toString() {
    return 'SignOutOptions('
        'invalidateAllSessions: $invalidateAllSessions, '
        'clearLocalData: $clearLocalData, '
        'reason: $reason'
        ')';
  }
}

/// Raisons possibles pour une d√©connexion
enum SignOutReason {
  /// D√©connexion initi√©e par l'utilisateur
  userInitiated,

  /// D√©connexion pour des raisons de s√©curit√©
  security,

  /// Session expir√©e
  sessionExpired,

  /// D√©connexion automatique (inactivit√©)
  inactivity,

  /// Erreur d'authentification
  authError,

  /// Maintenance du syst√®me
  maintenance,
}

/// Extension pour obtenir des informations sur la raison de d√©connexion
extension SignOutReasonExtension on SignOutReason {
  /// Obtient une description lisible de la raison
  String get description {
    switch (this) {
      case SignOutReason.userInitiated:
        return 'D√©connexion demand√©e par l\'utilisateur';
      case SignOutReason.security:
        return 'D√©connexion pour des raisons de s√©curit√©';
      case SignOutReason.sessionExpired:
        return 'Session expir√©e';
      case SignOutReason.inactivity:
        return 'D√©connexion automatique due √† l\'inactivit√©';
      case SignOutReason.authError:
        return 'Erreur d\'authentification';
      case SignOutReason.maintenance:
        return 'Maintenance du syst√®me';
    }
  }

  /// Indique si la d√©connexion n√©cessite un message √† l'utilisateur
  bool get requiresUserNotification {
    switch (this) {
      case SignOutReason.userInitiated:
        return false; // L'utilisateur sait qu'il se d√©connecte
      case SignOutReason.security:
      case SignOutReason.sessionExpired:
      case SignOutReason.inactivity:
      case SignOutReason.authError:
      case SignOutReason.maintenance:
        return true; // L'utilisateur doit √™tre inform√©
    }
  }

  /// Obtient le niveau de s√©v√©rit√© de la d√©connexion
  SignOutSeverity get severity {
    switch (this) {
      case SignOutReason.userInitiated:
        return SignOutSeverity.normal;
      case SignOutReason.sessionExpired:
      case SignOutReason.inactivity:
        return SignOutSeverity.warning;
      case SignOutReason.security:
      case SignOutReason.authError:
        return SignOutSeverity.critical;
      case SignOutReason.maintenance:
        return SignOutSeverity.info;
    }
  }
}

/// Niveaux de s√©v√©rit√© pour les d√©connexions
enum SignOutSeverity {
  normal,
  info,
  warning,
  critical,
}

/// Extension pour la s√©v√©rit√© des d√©connexions
extension SignOutSeverityExtension on SignOutSeverity {
  /// Obtient la couleur associ√©e √† la s√©v√©rit√©
  String get colorHex {
    switch (this) {
      case SignOutSeverity.normal:
        return '#6B7280'; // Gris
      case SignOutSeverity.info:
        return '#3B82F6'; // Bleu
      case SignOutSeverity.warning:
        return '#F59E0B'; // Orange
      case SignOutSeverity.critical:
        return '#EF4444'; // Rouge
    }
  }

  /// Obtient l'ic√¥ne associ√©e √† la s√©v√©rit√©
  String get icon {
    switch (this) {
      case SignOutSeverity.normal:
        return 'üëã';
      case SignOutSeverity.info:
        return '‚ÑπÔ∏è';
      case SignOutSeverity.warning:
        return '‚ö†Ô∏è';
      case SignOutSeverity.critical:
        return 'üö®';
    }
  }
}
