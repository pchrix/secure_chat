// Tour automatis√© de l'application SecureChat avec Playwright
const { test, expect } = require('@playwright/test');

test.describe('üé≠ Tour Complet SecureChat MVP', () => {
  
  test.beforeEach(async ({ page }) => {
    // Navigation vers l'application Flutter
    console.log('üöÄ Acc√®s √† l\'application SecureChat...');
    await page.goto('http://127.0.0.1:8080');
    
    // Attendre que Flutter soit compl√®tement charg√©
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000); // Attendre les animations de d√©marrage
  });

  test('üîê Test complet du flux d\'authentification', async ({ page }) => {
    console.log('üîê === TEST AUTHENTIFICATION ===');
    
    // V√©rifier la page d'authentification
    console.log('1. V√©rification de la page d\'authentification...');
    
    // Rechercher les √©l√©ments Flutter (utilisation de s√©lecteurs Flutter-web)
    const titleElements = await page.locator('text=SecureChat').all();
    expect(titleElements.length).toBeGreaterThan(0);
    console.log('‚úÖ Titre "SecureChat" trouv√©');
    
    // V√©rifier la pr√©sence du texte d'authentification
    const authText = page.locator('text*=Authentification');
    await expect(authText.first()).toBeVisible({ timeout: 10000 });
    console.log('‚úÖ Interface d\'authentification visible');
    
    // Simuler la saisie du PIN (1234)
    console.log('2. Saisie du PIN par d√©faut (1234)...');
    
    // Dans Flutter Web, nous devons utiliser des approches diff√©rentes
    // Tenter de trouver les boutons du clavier num√©rique
    await page.waitForTimeout(2000);
    
    // M√©thode alternative : simulation clavier
    await page.keyboard.press('1');
    await page.keyboard.press('2');
    await page.keyboard.press('3');
    await page.keyboard.press('4');
    
    console.log('‚úÖ PIN saisi (simulation clavier)');
    
    // Attendre la navigation vers la page d'accueil
    await page.waitForTimeout(3000);
    console.log('‚úÖ Navigation post-authentification compl√©t√©e');
  });

  test('üè† Navigation et exploration de la page d\'accueil', async ({ page }) => {
    console.log('üè† === TEST PAGE D\'ACCUEIL ===');
    
    // Authentification rapide
    await quickAuth(page);
    
    console.log('1. Exploration de l\'interface principale...');
    
    // V√©rifier les √©l√©ments de l'interface
    const welcomeMessages = await page.locator('text*=Bienvenue').all();
    if (welcomeMessages.length > 0) {
      console.log('‚úÖ Message de bienvenue d√©tect√©');
    }
    
    const secureChat = await page.locator('text=SecureChat').all();
    expect(secureChat.length).toBeGreaterThan(0);
    console.log('‚úÖ En-t√™te SecureChat pr√©sent');
    
    // Rechercher les boutons principaux
    const createButton = page.locator('text*=Cr√©er');
    const joinButton = page.locator('text*=Rejoindre');
    
    if (await createButton.first().isVisible()) {
      console.log('‚úÖ Bouton "Cr√©er un salon" trouv√©');
    }
    
    if (await joinButton.first().isVisible()) {
      console.log('‚úÖ Bouton "Rejoindre un salon" trouv√©');
    }
    
    // Rechercher le salon de d√©monstration
    const demoRoom = page.locator('text*=d√©monstration');
    if (await demoRoom.first().isVisible()) {
      console.log('‚úÖ Salon de d√©monstration visible');
      
      // Cliquer sur le salon de d√©monstration
      console.log('2. Acc√®s au salon de d√©monstration...');
      await demoRoom.first().click();
      await page.waitForTimeout(2000);
      console.log('‚úÖ Navigation vers le salon de d√©monstration');
    }
  });

  test('üí¨ Test de l\'interface de chat', async ({ page }) => {
    console.log('üí¨ === TEST INTERFACE CHAT ===');
    
    // Authentification et navigation vers le salon
    await quickAuth(page);
    await page.waitForTimeout(2000);
    
    // Rechercher et acc√©der au salon de d√©monstration
    const demoRoom = page.locator('text*=d√©monstration');
    if (await demoRoom.first().isVisible()) {
      await demoRoom.first().click();
      await page.waitForTimeout(3000);
      console.log('‚úÖ Acc√®s au salon de chat');
      
      // V√©rifier les messages existants
      const messages = await page.locator('text*=Bienvenue').all();
      if (messages.length > 0) {
        console.log('‚úÖ Messages de d√©monstration visibles');
      }
      
      // Tester l'envoi d'un nouveau message
      console.log('1. Test d\'envoi de message...');
      
      // Rechercher la zone de saisie
      const messageInput = page.locator('input[type="text"]').first();
      if (await messageInput.isVisible()) {
        await messageInput.fill('üß™ Message de test Playwright');
        await page.keyboard.press('Enter');
        console.log('‚úÖ Message de test envoy√©');
        
        await page.waitForTimeout(1000);
        
        // V√©rifier que le message appara√Æt
        const testMessage = page.locator('text*=Message de test');
        if (await testMessage.first().isVisible()) {
          console.log('‚úÖ Message de test affich√© dans le chat');
        }
      }
    }
  });

  test('üé® V√©rification du design et de la responsivit√©', async ({ page }) => {
    console.log('üé® === TEST DESIGN ET RESPONSIVIT√â ===');
    
    await quickAuth(page);
    
    console.log('1. Test responsive - Mobile (375px)...');
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(1000);
    
    const mobileElements = await page.locator('body').screenshot();
    console.log('‚úÖ Capture mobile effectu√©e');
    
    console.log('2. Test responsive - Tablette (768px)...');
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.waitForTimeout(1000);
    console.log('‚úÖ Adaptation tablette test√©e');
    
    console.log('3. Test responsive - Desktop (1280px)...');
    await page.setViewportSize({ width: 1280, height: 720 });
    await page.waitForTimeout(1000);
    console.log('‚úÖ Adaptation desktop test√©e');
    
    // V√©rifier les couleurs du th√®me
    const bodyStyles = await page.evaluate(() => {
      const body = document.querySelector('body');
      const styles = window.getComputedStyle(body);
      return {
        backgroundColor: styles.backgroundColor,
        color: styles.color
      };
    });
    
    console.log('‚úÖ Styles du th√®me r√©cup√©r√©s:', bodyStyles);
  });

  test('‚öôÔ∏è Test des fonctionnalit√©s avanc√©es', async ({ page }) => {
    console.log('‚öôÔ∏è === TEST FONCTIONNALIT√âS AVANC√âES ===');
    
    await quickAuth(page);
    
    console.log('1. Test du bouton d\'aide...');
    
    // Rechercher l'ic√¥ne d'aide
    const helpIcon = page.locator('[data-testid="help-button"]').or(
      page.locator('text*=help').or(
        page.locator('button').filter({ hasText: '?' })
      )
    );
    
    if (await helpIcon.first().isVisible()) {
      await helpIcon.first().click();
      console.log('‚úÖ Bouton d\'aide cliqu√©');
      
      await page.waitForTimeout(1000);
      
      // V√©rifier l'ouverture du guide
      const guideText = page.locator('text*=Guide');
      if (await guideText.first().isVisible()) {
        console.log('‚úÖ Guide d\'utilisation ouvert');
      }
    }
    
    console.log('2. Test de la navigation...');
    
    // Tester les transitions de page
    await page.goBack();
    await page.waitForTimeout(1000);
    console.log('‚úÖ Navigation arri√®re test√©e');
  });

  test('üîç Audit complet de l\'application', async ({ page }) => {
    console.log('üîç === AUDIT COMPLET APPLICATION ===');
    
    await quickAuth(page);
    
    console.log('1. Analyse des performances...');
    
    // M√©triques de performance
    const performanceMetrics = await page.evaluate(() => {
      const navigation = performance.getEntriesByType('navigation')[0];
      return {
        loadTime: navigation.loadEventEnd - navigation.fetchStart,
        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.fetchStart,
        firstPaint: performance.getEntriesByType('paint').find(p => p.name === 'first-paint')?.startTime,
        firstContentfulPaint: performance.getEntriesByType('paint').find(p => p.name === 'first-contentful-paint')?.startTime
      };
    });
    
    console.log('üìä M√©triques de performance:', performanceMetrics);
    
    console.log('2. V√©rification de la s√©curit√© UI...');
    
    // V√©rifier l'absence d'informations sensibles dans le DOM
    const pageContent = await page.content();
    const hasSensitiveData = [
      'supabase.co',
      'eyJhbGciOiJIUzI1NiI', // Pattern JWT
      'password',
      'secret',
      'key'
    ].some(pattern => pageContent.toLowerCase().includes(pattern.toLowerCase()));
    
    if (!hasSensitiveData) {
      console.log('‚úÖ Aucune donn√©e sensible expos√©e dans le DOM');
    } else {
      console.log('‚ö†Ô∏è Donn√©es potentiellement sensibles d√©tect√©es');
    }
    
    console.log('3. Test de robustesse...');
    
    // Test de stress : navigation rapide
    for (let i = 0; i < 3; i++) {
      await page.reload();
      await page.waitForTimeout(1000);
    }
    console.log('‚úÖ Test de stress navigation completed');
    
    console.log('4. Capture finale...');
    
    // Capture d'√©cran finale
    await page.screenshot({ 
      path: 'test-results/securechat-final-screenshot.png',
      fullPage: true 
    });
    console.log('‚úÖ Capture d\'√©cran finale sauvegard√©e');
  });

});

// Fonction utilitaire pour l'authentification rapide
async function quickAuth(page) {
  console.log('üîê Authentification rapide...');
  
  // Attendre que la page soit charg√©e
  await page.waitForTimeout(2000);
  
  // Simuler la saisie du PIN
  await page.keyboard.press('1');
  await page.keyboard.press('2');
  await page.keyboard.press('3');
  await page.keyboard.press('4');
  
  // Attendre la navigation
  await page.waitForTimeout(3000);
  
  console.log('‚úÖ Authentification rapide termin√©e');
}

// Configuration des tests
test.use({
  viewport: { width: 1280, height: 720 },
  ignoreHTTPSErrors: true,
  video: 'retain-on-failure',
  screenshot: 'only-on-failure',
});